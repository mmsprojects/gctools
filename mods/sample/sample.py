# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GC TOOLS

 AI Plugin for Qgis with all kind of info
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2025-08-14
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Mateus Melo Siqueira/Remis Balaniuk
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtWidgets import QToolButton, QMenu, QLineEdit, QLabel, QDialog, QPushButton, QCheckBox, QGridLayout
from qgis.PyQt.QtCore import QObject, Qt, QSize
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import QgsProject, QgsLayerTreeLayer, QgsStyle, QgsProject, QgsCategorizedSymbolRenderer, QgsSymbol, QgsLineSymbol, QgsRendererCategory,QgsFeature, QgsField, QgsFeatureRequest,QgsWkbTypes, QgsGeometry, QgsPoint, QgsProject, QgsMapLayerProxyModel, QgsVectorLayer, QgsField, QgsVectorFileWriter, QgsRectangle
from qgis.gui import QgsRubberBand, QgsMapLayerComboBox, QgsFieldComboBox,QgsMapTool, QgsMapCanvas
from PyQt5.QtWidgets import QTabWidget, QFrame,QAbstractItemView,  QMessageBox, QShortcut, QFileDialog, QDockWidget, QComboBox, QLineEdit, QTableWidget, QTableWidgetItem, QCheckBox, QGridLayout, QLabel, QWidget, QSizePolicy,QSpacerItem, QPushButton
from qgis.PyQt.QtCore import Qt, QSize, QVariant
from qgis.PyQt.QtGui import QColor, QCursor, QPixmap, QIcon, QImage
from PyQt5.QtCore import QThread, pyqtSignal
import os
import sqlite3
# import osr
import multiprocessing

class WorkerInference(QThread):
    def __init__(self, plugin_dir):
        QThread.__init__(self)
        self.stp = False
        self.plugin_dir = plugin_dir

    up_list = pyqtSignal(list)
    results = pyqtSignal(list)



    def run(self):
        pass

class SAMPLE:
    def __init__(self, iface, cls_main):

        # Save reference to the QGIS interface
        self.gctools = cls_main
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = self.gctools.plugin_dir
        self.samples = None
        self.classeatual = None
        self.classeidatual = None
    def run(self):
        pass

        try:
            self.dock_gc.destroy()
        except:
            pass
        self.canvas = self.iface.mapCanvas()
        self.dock_gc = QDockWidget()

        # Run the dialog event loop
        self.dock_gc.setObjectName('GC Sample')
        self.dock_gc.setWindowTitle('GC Sample')

        # self.map_unidades.currentTextChanged.connect(self.changedMapUn)
        # self.visibilityChanged.connect(self.close)
        # self.setTitleText('dock_rev')
        self.dock_gc.setAllowedAreas(Qt.RightDockWidgetArea)
        self.iface.addDockWidget(Qt.RightDockWidgetArea, self.dock_gc)

        self.layout = QGridLayout()
        r_ = 0
        self.pixmap = QPixmap(':/plugins/gctools/icons/sample.png')
        # self.pixmap.setFixedSize(50, 50)
        self.label_logo = QLabel()
        self.label_logo.setPixmap(self.pixmap.scaled(50, 50))

        self.label_logo.setMaximumSize(60, 60)
        self.layout.addWidget(self.label_logo, r_, 0, 1, 2)

        r_ += 1
        self.label_project1 = QLabel(text='Sem projeto')
        self.layout.addWidget(self.label_project1, r_, 0, 1, 1)
        self.label_project2 = QLabel()
        self.layout.addWidget(self.label_project2, r_, 1, 1, 1)
        r_ += 1
        self.pb_addrow = QPushButton()
        self.icon_pb_addrow = QIcon(':/plugins/gctools/icons/plus.png')
        # self.icon_pb_play.addPixmap(QImage(':/plugins/mmsd_gis/icons/start_icon.png'))
        self.pb_addrow.setIcon(self.icon_pb_addrow)
        self.pb_addrow.setIconSize(QSize(15, 15))
        # self.pb_play.setFixedSize(QSize(20, 20))
        self.pb_addrow.clicked.connect(self.addrow)
        self.layout.addWidget(self.pb_addrow, r_, 0, 1, 1)

        self.pb_save = QPushButton()
        self.icon_pb_save = QIcon(':/plugins/gctools/icons/save.png')
        # self.icon_pb_play.addPixmap(QImage(':/plugins/mmsd_gis/icons/start_icon.png'))
        self.pb_save.setIcon(self.icon_pb_save)
        self.pb_save.setIconSize(QSize(15, 15))
        # self.pb_play.setFixedSize(QSize(20, 20))
        self.pb_save.clicked.connect(self.saveclasses)
        self.layout.addWidget(self.pb_save, r_, 1, 1, 1)
        r_ += 1
        self.tableclasses = QTableWidget()
        self.tableclasses.setColumnCount(2)
        self.tableclasses.setHorizontalHeaderLabels(["id", "Classe"])
        self.tableclasses.setSelectionBehavior(QTableWidget.SelectRows)
        self.tableclasses.itemSelectionChanged.connect(self.changeClasse)
        self.layout.addWidget(self.tableclasses, r_, 0, 1, 2)
        r_ += 1
        self.label_layer_samples = QLabel("Layer Amostras")
        self.layout.addWidget(self.label_layer_samples, r_, 0, 1, 2)

        r_ += 1
        self.map_layer_samples = QgsMapLayerComboBox()
        self.map_layer_samples.setFilters(QgsMapLayerProxyModel.PolygonLayer)
        self.layout.addWidget(self.map_layer_samples, r_, 0, 1, 2)
        r_ += 1
        self.pb_addpoly = QPushButton()
        self.icon_pb_addpoly = QIcon(':/plugins/gctools/icons/plus.png')
        # self.icon_pb_play.addPixmap(QImage(':/plugins/mmsd_gis/icons/start_icon.png'))
        self.pb_addpoly.setIcon(self.icon_pb_addpoly)
        self.pb_addpoly.setIconSize(QSize(30, 30))
        # self.pb_play.setFixedSize(QSize(20, 20))
        self.pb_addpoly.clicked.connect(self.start_draw)
        self.pb_stop = QPushButton()
        self.icon_pb_stop = QIcon(':/plugins/gctools/icons/stop_bg.png')
        # self.icon_pb_play.addPixmap(QImage(':/plugins/mmsd_gis/icons/stop_icon.png'))
        self.pb_stop.setIcon(self.icon_pb_stop)
        self.pb_stop.setIconSize(QSize(30, 30))
        # self.pb_play.setFixedSize(QSize(20, 20))
        # self.pb_stop.clicked.connect(self.stop_loggin)
        self.layout.addWidget(self.pb_addpoly, r_, 0, 1, 1)
        self.layout.addWidget(self.pb_stop, r_, 1, 1, 1)

        self.wd = QWidget()
        self.wd.setLayout(self.layout)
        self.dock_gc.setWidget(self.wd)

        self.importclasses()

    def importclasses_s(self):
        qfd = QFileDialog()
        filter = "SQLite (*.sqlite)"
        openeddirname = QFileDialog.getOpenFileName(qfd, "Open project", "", filter)[0]

        if openeddirname:
            self.db = openeddirname
            self.label_project1.setText("Projeto:")
            self.label_project2.setText(os.path.basename(self.db))

            conn = sqlite3.connect(self.db)
            c = conn.cursor()
            c.row_factory = sqlite3.Row
            c.execute('PRAGMA journal_mode=wal')
            conn.commit()
            data = c.execute("""SELECT id,classe
                         FROM sample_classes""")
            self.tableclasses.setRowCount(0)
            for i,row in enumerate(data):
                self.tableclasses.setRowCount(self.tableclasses.rowCount() + 1)
                self.tableclasses.setItem(i, 0, QTableWidgetItem(str(row['id'])))  # id
                self.tableclasses.setItem(i, 1, QTableWidgetItem(str(row['classe'])))  # pasta

        self.dlg_open_classes.close()

    def importclasses_n(self):
        self.dlg_open_classes.close()
        self.create_project()

    def create_project_s(self):
        qwidget = QWidget()
        savedirname, _ = QFileDialog.getSaveFileName(
            qwidget, "Save project", "", " SQLite (*.sqlite)")
        print(savedirname)
        if savedirname:
            self.db = savedirname
            conn = sqlite3.connect(self.db)
            c = conn.cursor()
            c.execute('PRAGMA journal_mode=wal')
            c.execute("""CREATE TABLE IF NOT EXISTS data_proc(
                                                      id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
                                                      proc_id integer NOT NULL,
                                                      folder text,
                                                      image text,
                                                      status text,
                                                      process integer,
                                                      date datetime,
                                                      FOREIGN KEY(proc_id) REFERENCES procs(id))""")
            c.execute("""CREATE TABLE IF NOT EXISTS procs(
                                                         id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
                                                         date_start datetime,
                                                         date_finish datetime,
                                                         status text,
                                                         process integer,
                                                         user text)""")

            c.execute("""CREATE TABLE IF NOT EXISTS sample_classes(
                                                    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
                                                    classe text)""")
            c.close()
            conn.close()
            self.dlg_create_project.close()

    def create_project_n(self):
        self.dlg_create_project.close()
        pass
    def importclasses(self):
        self.dlg_open_classes = QDialog()
        self.dlg_open_classes.setWindowTitle("Abrir projeto")
        self.layout_open_classes = QGridLayout()
        self.pb_open_classes_sim = QPushButton(text='Sim')
        self.pb_open_classes_sim.pressed.connect(self.importclasses_s)
        self.pb_open_classes_nao = QPushButton(text='Não')
        self.pb_open_classes_nao.pressed.connect(self.importclasses_n)
        self.layout_open_classes.addWidget(self.pb_open_classes_sim, 0, 0)
        self.layout_open_classes.addWidget(self.pb_open_classes_nao, 0, 1)
        self.dlg_open_classes.setLayout(self.layout_open_classes)
        self.dlg_open_classes.show()

    def create_project(self):
        self.dlg_create_project = QDialog()
        self.dlg_create_project.setWindowTitle("Criar projeto")
        self.layout_create_project = QGridLayout()
        self.pb_create_project_sim = QPushButton(text='Sim')
        self.pb_create_project_sim.pressed.connect(self.create_project_s)
        self.pb_create_project_nao = QPushButton(text='Não')
        self.pb_create_project_nao.pressed.connect(self.create_project_n)
        self.layout_create_project.addWidget(self.pb_create_project_sim, 0, 0)
        self.layout_create_project.addWidget(self.pb_create_project_nao, 0, 1)
        self.dlg_create_project.setLayout(self.layout_create_project)
        self.dlg_create_project.show()
    def saveclasses(self):
        conn = sqlite3.connect(self.db)
        c = conn.cursor()
        c.row_factory = sqlite3.Row
        print("saving classes!")#
        if self.tableclasses.rowCount()>0:
            c.execute('PRAGMA journal_mode=wal')
            c.execute("""CREATE TABLE IF NOT EXISTS sample_classes(
                                        id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
                                        classe text)""")

            c.execute("""DELETE FROM sample_classes""")
            for row in range(0, self.tableclasses.rowCount()):
                item1 = self.tableclasses.item(row, 0)
                item2 = self.tableclasses.item(row, 1)
                if item1!=None and item1.text()!="" and item2!=None and item2.text()!="":
                    id = self.tableclasses.item(row, 0).text()
                    classe = self.tableclasses.item(row, 1).text()

                    c.execute(f"""INSERT INTO sample_classes(id,classe)
                                VALUES({id},'{classe}')""")
                    conn.commit()
    def addrow(self):
        self.tableclasses.setRowCount(self.tableclasses.rowCount() + 1)
    def create_layer_sample_memory(self):
        # create layer if not exists
        self.epsg = QgsProject.instance().crs().postgisSrid()
        print(self.epsg)
        self.samples = QgsVectorLayer('Polygon?crs=epsg:{}&index=yes'.format(self.epsg), 'amostras_a',
                                      "memory")

        self.pr = self.samples.dataProvider()
        self.pr.addAttributes([QgsField("id", QVariant.Int), QgsField("classe_id", QVariant.Int),QgsField("classe", QVariant.String)])

        QgsProject.instance().addMapLayers([self.samples])
        self.map_layer_samples.setLayer(self.samples)
        #self.symbol_layer(self.samples, "classe_id")
        self.dlg_layer.close()

    def create_layer_sample_file(self):
        dialog = QFileDialog()
        dialog.setFileMode(QFileDialog.Directory)
        output = dialog.getExistingDirectory(None, "Selecione um diretório", "")

        if output:
            # create layer if not exists
            self.epsg = QgsProject.instance().crs().postgisSrid()

            dir = os.path.dirname(output)
            name = os.path.basename(output).replace(".shp", "")
            out_a = os.path.join(dir, "amostras_a.shp")
            polygon = QgsVectorLayer('Polygon?crs=epsg:{}&index=yes'.format(self.epsg), "amostras_a",
                                     "memory")

            options = QgsVectorFileWriter.SaveVectorOptions()
            options.driverName = 'ESRI Shapefile'
            context = QgsProject.instance().transformContext()
            # since QGIS 3.20 you should use writeAsVectorFormatV3
            QgsVectorFileWriter.writeAsVectorFormatV3(polygon, out_a, context, options)


            self.samples = QgsVectorLayer(out_a, "amostras_a", "ogr")

            self.pr = self.samples.dataProvider()
            self.pr.addAttributes([QgsField("id", QVariant.Int),QgsField("classe_id", QVariant.Int),QgsField("classe", QVariant.String)])

            QgsProject.instance().addMapLayers([self.samples])
            self.map_layer_samples.setLayer(self.samples)
            #self.symbol_layer(self.samples, "classe_id")
            self.dlg_layer.close()
    def verify_layer_sample(self):
        layers = QgsProject.instance().mapLayersByName("amostras_a")
        exist = True if layers else False

        if not exist and self.map_layer_samples.currentText != '':
            self.dlg_layer = QDialog()
            self.dlg_layer.setWindowTitle("Salvamento da camada")
            self.layout_layer = QGridLayout()
            self.pb_layer_mem = QPushButton(text='Memória')
            self.pb_layer_mem.pressed.connect(self.create_layer_sample_memory)
            self.pb_layer_file = QPushButton(text='...')
            self.pb_layer_file.pressed.connect(self.create_layer_sample_file)
            self.layout_layer.addWidget(self.pb_layer_mem, 0, 0)
            self.layout_layer.addWidget(self.pb_layer_file, 0, 1)
            self.dlg_layer.setLayout(self.layout_layer)
            self.dlg_layer.show()

    def setcursor(self):

        rec_tool = RubberBandRectangleTool(self.iface.mapCanvas(),self)
        self.iface.mapCanvas().setMapTool(rec_tool)
    def start_draw(self):
        self.verify_layer_sample()
        self.setcursor()

    def changeClasse(self):
        selected_items = self.tableclasses.selectedItems()

        if not selected_items:
            return

        selected_row = set()
        for item in selected_items:
            selected_row.add(item.row())

        if len(selected_row) != 1:
            return

        row_index = selected_row.pop()
        row_values = [self.tableclasses.item(row_index, col).text() for col in range(self.tableclasses.columnCount())]

        self.classeidatual = row_values[0]
        self.classeatual = row_values[1]

    def symbol_layer(self,layer,atributo):

        # Crie um símbolo de linha simples
        symbol = QgsLineSymbol.createSimple({'color': 'red', 'width': '1'})
        renderer = QgsCategorizedSymbolRenderer(atributo)

        for i in range(10):
            category = QgsRendererCategory(i, symbol, str(i))
            renderer.addCategory(category)


        # Aplique o renderizador à camada
        layer.setRenderer(renderer)

        # Atualize a representação da camada no mapa
        layer.triggerRepaint()

    def savelayerstyle(self,layer):

        # Substitua "caminho_para_banco_de_dados.db" pelo caminho onde deseja salvar o banco de dados SQLite
        caminho_banco_de_dados = os.path.join(self.plugin_dir,"utils","estilos.db")

        # Estabeleça uma conexão com o banco de dados SQLite
        conn = sqlite3.connect(caminho_banco_de_dados)

        # Salve o estilo da camada no banco de dados
        with conn:
            # Crie uma representação do estilo da camada
            style = QgsStyle().defaultStyle()
            layer_tree_layer = QgsLayerTreeLayer(layer)
            style_manager = QgsStyle().styleManager()
            style_manager.setCurrentStyle(style)
            style_manager.setCurrentLayer(layer_tree_layer)
            style_blob = style_manager.currentStyle().asXML()

            conn.execute("CREATE TABLE IF NOT EXISTS estilos (nome TEXT PRIMARY KEY, estilo BLOB)")
            conn.execute("INSERT OR REPLACE INTO estilos (nome, estilo) VALUES (?, ?)", ("camada_estilo", style_blob))

    def updatelayerstyle(self,layer,db):
        outra_camada = layer

        # Substitua "caminho_para_banco_de_dados.db" pelo caminho do banco de dados SQLite onde o estilo foi salvo
        caminho_banco_de_dados = db

        # Estabeleça uma conexão com o banco de dados SQLite
        conn = sqlite3.connect(caminho_banco_de_dados)

        # Recupere o estilo do banco de dados
        with conn:
            cursor = conn.execute("SELECT estilo FROM estilos WHERE nome = ?", ("camada_estilo",))
            row = cursor.fetchone()
            if row:
                style_blob = row[0]

                # Aplique o estilo à outra camada
                style_manager = QgsStyle().styleManager()
                style_manager.readFromLayer(outra_camada, style_blob)
                outra_camada.triggerRepaint()
class RubberBandRectangleTool(QgsMapTool):
    def __init__(self, canvas,cls_main):
        super(RubberBandRectangleTool, self).__init__(canvas)
        self.canvas = canvas
        self.rubber_band = None
        self.start_point = None
        self.sample = cls_main
        self.layer = self.sample.map_layer_samples.currentLayer()

    def canvasPressEvent(self, event):
        if event.button() == 1:  # Botão esquerdo do mouse
            self.start_point = self.toMapCoordinates(event.pos())
            if not self.rubber_band:
                self.rubber_band = QgsRubberBand(self.canvas, QgsWkbTypes.PolygonGeometry)
            self.rubber_band.setToGeometry(QgsGeometry.fromRect(QgsRectangle(self.start_point, self.start_point)), None)
            self.rubber_band.show()
            print(self.rubber_band)

    def canvasMoveEvent(self, event):
        if self.start_point is not None:
            current_point = self.toMapCoordinates(event.pos())
            rect = QgsRectangle(self.start_point, current_point)
            self.rubber_band.setToGeometry(QgsGeometry.fromRect(rect), None)

    def addpoly2layer(self,layer,rubber,attrs):
        layer.startEditing()
        pr = layer.dataProvider()#
        #pr.addAttributes([QgsField("Imagem", QVariant.String)])
        rect = rubber.asGeometry()
        feature = QgsFeature()
        feature.setGeometry(rect)
        feature.setAttributes(attrs)
        pr.addFeatures([feature])
        layer.updateExtents()
        layer.commitChanges()
        self.rubber_band.reset()
        #
    def canvasReleaseEvent(self, event):
        if event.button() == 1 and self.rubber_band:
            self.sample.changeClasse()
            self.addpoly2layer(self.sample.map_layer_samples.currentLayer(), self.rubber_band,[0,self.sample.classeidatual,self.sample.classeatual])
            self.start_point = None
            self.rubber_band = None
            # self.rubber_band.reset()
            #self.sample.savelayerstyle(self.sample.map_layer_samples.currentLayer())

    #def deactivate(self):
        #self.canvas.unsetMapTool(self)
        #self.canvas.setCursor(Qt.ArrowCursor)






